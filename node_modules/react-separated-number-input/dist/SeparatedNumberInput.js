"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mergeClassNames = _interopRequireDefault(require("merge-class-names"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var baseClassName = 'react-separated-number-input';
/**
 * On iOS 12 and lower, inputmode="numeric" is not supported, so pattern="\d*"
 * needs to be set instead for a split second to tirgger the right keyboard.
 */

var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
/**
 * Allows to use multiple refs on a single React element.
 * Supports both functions and ref objects created using createRef() and useRef().
 *
 * Usage:
 * ```jsx
 * <div ref={mergeRefs(ref1, ref2, ref3)} />
 * ```
 *
 * @param {...Array<Function|Object>} inputRefs Array of refs
 */

function mergeRefs() {
  for (var _len = arguments.length, inputRefs = new Array(_len), _key = 0; _key < _len; _key++) {
    inputRefs[_key] = arguments[_key];
  }

  return function (ref) {
    inputRefs.forEach(function (inputRef) {
      if (!inputRef) {
        return;
      }

      if (typeof inputRef === 'function') {
        inputRef(ref);
      } else {
        // eslint-disable-next-line no-param-reassign
        inputRef.current = ref;
      }
    });
  };
}

var SeparatedNumberInput =
/*#__PURE__*/
function (_Component) {
  _inherits(SeparatedNumberInput, _Component);

  function SeparatedNumberInput() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SeparatedNumberInput);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SeparatedNumberInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      // eslint-disable-next-line react/destructuring-assignment
      value: _this.props.defaultValue,
      selectionStart: null
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (event) {
      var _this$props = _this.props,
          groupLengths = _this$props.groupLengths,
          onChange = _this$props.onChange;
      var _event$target = event.target,
          selectionStart = _event$target.selectionStart,
          value = _event$target.value;

      var adjustedSelectionStart = function () {
        if (selectionStart === value.length) {
          // User's cursor is at the end of input - no alignments necessary
          return null;
        }

        var isCaretAfterSeparator = groupLengths.some(function (groupLength, index) {
          var separatorCount = index + 1;
          var totalGroupLengthSoFar = (0, _utils.sum)(groupLengths.slice(0, separatorCount));
          return totalGroupLengthSoFar + separatorCount === selectionStart;
        });
        var offset = _this.formattedValue.length <= value.length ? 1 : -1;
        return isCaretAfterSeparator ? selectionStart + offset : selectionStart;
      }();

      _this.setState({
        selectionStart: adjustedSelectionStart,
        value: value
      });

      if (onChange) {
        onChange(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onTouchStart", function (event) {
      var onTouchStart = _this.props.onTouchStart;

      if (iOS) {
        // Sets pattern for iOS devices to trigger numeric keyboard
        _this.input.setAttribute('pattern', '\\d*');
      }

      if (onTouchStart) {
        onTouchStart(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onTouchEnd", function (event) {
      var _this$props2 = _this.props,
          onTouchEnd = _this$props2.onTouchEnd,
          pattern = _this$props2.pattern;

      if (iOS) {
        requestAnimationFrame(function () {
          if (pattern) {
            _this.input.setAttribute('pattern', pattern);
          } else {
            _this.input.removeAttribute('pattern');
          }
        });
      }

      if (onTouchEnd) {
        onTouchEnd(event);
      }
    });

    return _this;
  }

  _createClass(SeparatedNumberInput, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var formattedValue = this.formattedValue;

      var _this$props3 = this.props,
          className = _this$props3.className,
          defaultValue = _this$props3.defaultValue,
          groupLengths = _this$props3.groupLengths,
          inputRef = _this$props3.inputRef,
          onChange = _this$props3.onChange,
          value = _this$props3.value,
          otherProps = _objectWithoutProperties(_this$props3, ["className", "defaultValue", "groupLengths", "inputRef", "onChange", "value"]);

      var selectionStart = this.state.selectionStart;
      return _react["default"].createElement("input", _extends({
        type: "text"
      }, otherProps, {
        className: (0, _mergeClassNames["default"])(baseClassName, className),
        inputMode: "numeric",
        onChange: this.onChange,
        onTouchEnd: this.onTouchEnd,
        onTouchStart: this.onTouchStart,
        ref: mergeRefs(inputRef, function (ref) {
          if (!ref) {
            return;
          }

          _this2.input = ref;

          if (selectionStart !== null) {
            ref.setSelectionRange(selectionStart, selectionStart);
          }
        }),
        value: formattedValue
      }));
    }
  }, {
    key: "isControlled",
    get: function get() {
      return 'value' in this.props;
    }
  }, {
    key: "value",
    get: function get() {
      // eslint-disable-next-line react/destructuring-assignment
      return this.isControlled ? this.props.value : this.state.value;
    }
  }, {
    key: "formattedValue",
    get: function get() {
      var value = this.value;
      var groupLengths = this.props.groupLengths;
      var valueNumbersOnly = (0, _utils.removeNonNumericChars)(value);
      var valueGroup = (0, _utils.groupCharacters)(valueNumbersOnly, groupLengths);
      var formattedValue = valueGroup.join(' ');
      return formattedValue;
    }
  }]);

  return SeparatedNumberInput;
}(_react.Component);

exports["default"] = SeparatedNumberInput;
SeparatedNumberInput.propTypes = {
  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
  defaultValue: _propTypes["default"].string,
  groupLengths: _propTypes["default"].arrayOf(_propTypes["default"].number).isRequired,
  inputRef: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].object]),
  onChange: _propTypes["default"].func,
  onTouchEnd: _propTypes["default"].func,
  onTouchStart: _propTypes["default"].func,
  pattern: _propTypes["default"].string,
  value: _propTypes["default"].string
};